name: Filtrage du fichier

on:
  schedule:
    # Exécution tous les jours à 2h du matin UTC
    - cron: '0 2 * * *'
  # Vous pouvez également déclencher ce workflow manuellement si nécessaire
  workflow_dispatch:

jobs:
  nettoyage:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Vérifier le code depuis le repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Étape 2 : Installer Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # Étape 3 : Installer les dépendances nécessaires (requests)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # Étape 4 : Télécharger et exécuter le script Python
    - name: Download and run Python script
      run: |
        # Télécharger le fichier à partir de l'URL
        curl -O https://raw.githubusercontent.com/AdguardTeam/FiltersRegistry/master/filters/filter_2_Base/filter.txt
        
        # Créer le script Python dynamiquement avec un bloc multi-lignes
        cat <<EOF > test.py
import requests

def nettoyer_fichier(url, output_file):
    # Télécharger le fichier depuis l'URL
    print("Téléchargement du fichier...")
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Erreur lors du téléchargement du fichier : {response.status_code}")
        return

    # Initialiser la liste pour stocker les lignes filtrées
    lignes_filtrées = []

    # Parcourir chaque ligne du fichier téléchargé
    for ligne in response.text.splitlines():
        # Ignorer les lignes de commentaires qui commencent par '!'
        if ligne.startswith('!'):
            continue
        
        # Ignorer les lignes commençant par '||' et finissant par '^'
        if ligne.startswith('||') and ligne.endswith('^'):
            continue
        
        # Ajouter la ligne à la liste si elle ne correspond à aucune condition de suppression
        lignes_filtrées.append(ligne)

    # Effacer le contenu actuel du fichier avant d'écrire les nouvelles lignes
    print(f"Effacement du contenu actuel du fichier '{output_file}'...")

    # Sauvegarder les lignes filtrées dans le fichier de sortie
    print(f"Enregistrement des lignes filtrées dans '{output_file}'...")
    with open(output_file, 'w') as f:
        for ligne in lignes_filtrées:
            f.write(f"{ligne}\n")

    print(f"Le fichier nettoyé a été sauvegardé dans '{output_file}'.")

# URL du fichier à télécharger depuis GitHub
url = 'https://raw.githubusercontent.com/AdguardTeam/FiltersRegistry/master/filters/filter_2_Base/filter.txt'

# Fichier de sortie
output_file = 'test.txt'

# Exécuter la fonction pour nettoyer le fichier
nettoyer_fichier(url, output_file)
EOF
        
        # Exécuter le script Python
        python3 test.py

    # Étape 5 : Ajouter le fichier filtré à Git et le pousser
    - name: Commit and push filtered file
      run: |
        # Configurer les informations de l'utilisateur Git pour commettre les modifications
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Ajouter le fichier filtré à Git et créer un commit
        git add test.txt
        git commit -m "Ajout du fichier filtré"
        git push
