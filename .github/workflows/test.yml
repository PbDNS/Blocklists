name: Filtrage du fichier

on:
  schedule:
    # Exécution tous les jours à 2h du matin UTC
    - cron: '0 2 * * *'
  # Vous pouvez également déclencher ce workflow manuellement si nécessaire
  workflow_dispatch:

jobs:
  nettoyage:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Vérifier le code depuis le repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Étape 2 : Installer Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # Étape 3 : Installer les dépendances nécessaires (requests)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # Étape 4 : Télécharger et exécuter le script Python
    - name: Download and run Python script
      run: |
        # Télécharger le fichier à partir de l'URL et exécuter le script
        curl -O https://raw.githubusercontent.com/AdguardTeam/FiltersRegistry/master/filters/filter_2_Base/filter.txt
        python3 test.py

    # Étape 5 : Vérifier si des changements ont été effectués dans test.txt
    - name: Check if test.txt has changed
      id: check_changes
      run: |
        # Vérifier les différences dans test.txt
        git diff --exit-code test.txt || echo "File has changed" > $GITHUB_ENV

    # Étape 6 : Ajouter et pousser les modifications, seulement si le fichier a changé
    - name: Commit and push filtered file
      if: env.FILE_HAS_CHANGED == 'File has changed'
      run: |
        # Configurer les informations de l'utilisateur Git pour commettre les modifications
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Ajouter le fichier filtré à Git et créer un commit
        git add test.txt
        git commit -m "Ajout du fichier filtré"
        git push
